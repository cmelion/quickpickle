// Generated by quickpickle
import { test, describe, beforeAll, afterAll } from 'vitest';
import {
  gherkinStep,
  applyBeforeAllHooks,
  applyBeforeHooks,
  applyAfterAllHooks,
  applyAfterHooks,
  getWorldConstructor,
} from 'quickpickle';

let World = getWorldConstructor()

const common = {};

beforeAll(async () => {
  await applyBeforeAllHooks(common);
});

afterAll(async () => {
  await applyAfterAllHooks(common);
});

const afterScenario = async(state) => {
  await applyAfterHooks(state);
}

const initScenario = async(context, scenario, tags) => {
  let state = new World(context, { feature:'Feature: QuickPickle\'s Comprehensive Gherkin Syntax Example', scenario, tags }, {});
  await state.init();
  state.common = common;
  state.info.feature = 'Feature: QuickPickle\'s Comprehensive Gherkin Syntax Example';
  state.info.scenario = scenario;
  state.info.tags = [...tags];
  await applyBeforeHooks(state);
  await gherkinStep('a common precondition', state, 10, -1);
  await gherkinStep('another common precondition', state, 11, -2);
  return state;
}

describe('Feature: QuickPickle\'s Comprehensive Gherkin Syntax Example', () => {

  test('Scenario: Basic scenario example\' (@tag @multiple_tags @scenario_tag)', async (context) => {
    let state = await initScenario(context, 'Basic scenario example\'', ['@tag', '@multiple_tags', '@scenario_tag']);
    await gherkinStep('an initial context\'', state, 15, 1);
    await gherkinStep('an action is performed\'', state, 16, 2);
    await gherkinStep('a verifiable outcome is achieved\'', state, 17, 3);
    await afterScenario(state);
  });

  test.concurrent.for([{"parameter":"value1'","another_parameter":"value2'","expected_result":"result1'"},{"parameter":"value3`","another_parameter":"value4`","expected_result":"result2`"}])(
    'Scenario Outline: Parameterized scenario for $parameter, \'$another_parameter\' (@tag @multiple_tags @concurrent)',
    async ({ parameter, another_parameter, expected_result }, context) => {
      let state = await initScenario(context, `Parameterized scenario for ${parameter}, '${another_parameter}'`, ['@tag', '@multiple_tags', '@concurrent']);
      await gherkinStep(`a 'precondition' with ${parameter}`, state, 20, 1);
      await gherkinStep(`an 'action' is taken with ${another_parameter}`, state, 21, 2);
      await gherkinStep(`the 'outcome' is ${expected_result}`, state, 22, 3);
      await afterScenario(state);
    }
  );

  test('Scenario: Scenario with various DataTable types (@tag @multiple_tags @data_table)', async (context) => {
    let state = await initScenario(context, 'Scenario with various DataTable types', ['@tag', '@multiple_tags', '@data_table']);
    await gherkinStep('a list of strings:', state, 31, 1, undefined, [["Apple'"],["Banana`"],["Cherry\""]]);
    await gherkinStep('a list of integers:', state, 35, 2, undefined, [["1"],["2"],["3"]]);
    await gherkinStep('a map of string to string:', state, 39, 3, undefined, [["key1'","value1'"],["key2`","value2\""]]);
    await gherkinStep('a list of maps:', state, 42, 4, undefined, [["name'","age`","role\""],["Alice'","30","admin\""],["Bob`","25","user\""]]);
    await gherkinStep('a map of string to list of string:', state, 46, 5, undefined, [["fruits","Apple, Banana, Cherry"],["vegetables","Carrot, Potato, Onion"]]);
    await gherkinStep('they are processed', state, 49, 6);
    await gherkinStep('the system behaves correctly', state, 50, 7);
    await afterScenario(state);
  });

  describe('Rule: Business rule description\'', () => {

    const initRuleScenario = async (context, scenario, tags) => {
      let state = await initScenario(context, scenario, tags);
      state.info.rule = 'Business rule description\'';
    await gherkinStep('a specific rule context', state, 57, -1);
    await gherkinStep('another specific rule context', state, 58, -2);
      return state;
    }


    test('Example: Rule example scenario\' (@tag @multiple_tags @rule_tag)', async (context) => {
      let state = await initRuleScenario(context, 'Rule example scenario\'', ['@tag', '@multiple_tags', '@rule_tag']);
      await gherkinStep('a specific rule context', state, 61, 1);
      await gherkinStep('a rule-related action occurs', state, 62, 2);
      await gherkinStep('the rule outcome is observed', state, 63, 3);
      await afterScenario(state);
    });

    test('Scenario: Also a rule example\' (@tag @multiple_tags @rule_tag)', async (context) => {
      let state = await initRuleScenario(context, 'Also a rule example\'', ['@tag', '@multiple_tags', '@rule_tag']);
      await gherkinStep('a Rule statement', state, 66, 1);
      await gherkinStep('a scenario is below it', state, 67, 2);
      await gherkinStep('it is a child of the Rule, even if it isn\'t indented', state, 68, 3);
      await afterScenario(state);
    });

    test.todo.skip('Scenario: Scenario with doc string (@tag @multiple_tags @rule_tag @wip @skip)', async (context) => {
      let state = await initRuleScenario(context, 'Scenario with doc string', ['@tag', '@multiple_tags', '@rule_tag', '@wip', '@skip']);
      await gherkinStep('a document with the following content:', state, 74, 1, undefined, {"content":"This is a doc string.\nIt can contain multiple lines.\nUseful for specifying larger text inputs."});
      await gherkinStep('the document is processed', state, 80, 2);
      await gherkinStep('the system handles it correctly', state, 81, 3);
      await afterScenario(state);
    });

    test('Scenario: Scenario with content type doc string (@tag @multiple_tags @rule_tag)', async (context) => {
      let state = await initRuleScenario(context, 'Scenario with content type doc string', ['@tag', '@multiple_tags', '@rule_tag']);
      await gherkinStep('a document with the following Markdown content:', state, 84, 1, undefined, {"content":"Lorem Ipsum\n===============\nLorem ipsum dolor sit amet,\nconsectetur adipiscing elit.","mediaType":"markdown"});
      await afterScenario(state);
    });

    test.sequential('Scenario: Scenario with And and But steps (@tag @multiple_tags @rule_tag @sequential)', async (context) => {
      let state = await initRuleScenario(context, 'Scenario with And and But steps', ['@tag', '@multiple_tags', '@rule_tag', '@sequential']);
      await gherkinStep('an initial state', state, 93, 1);
      await gherkinStep('some additional context', state, 94, 2);
      await gherkinStep('an action is performed', state, 95, 3);
      await gherkinStep('another action is performed', state, 96, 4);
      await gherkinStep('some assertion is made', state, 97, 5);
      await gherkinStep('some exception is also handled', state, 98, 6);
      await afterScenario(state);
    });

    test.fails('Scenario: Failing scenario example (@tag @multiple_tags @rule_tag @fails)', async (context) => {
      let state = await initRuleScenario(context, 'Failing scenario example', ['@tag', '@multiple_tags', '@rule_tag', '@fails']);
      await gherkinStep('a condition that will fail', state, 102, 1);
      await gherkinStep('an impossible action is attempted', state, 103, 2);
      await gherkinStep('an unreachable assertion is made', state, 104, 3);
      await afterScenario(state);
    });


  });

  describe('Rule: Rules don\'t nest', () => {

    const initRuleScenario = async (context, scenario, tags) => {
      let state = await initScenario(context, scenario, tags);
      state.info.rule = 'Rules don\'t nest';

      return state;
    }


    test('Example: This rule doesn\'t nest (@tag @multiple_tags)', async (context) => {
      let state = await initRuleScenario(context, 'This rule doesn\'t nest', ['@tag', '@multiple_tags']);
      await gherkinStep('a Rule statement', state, 110, 1);
      await gherkinStep('another Rule is indented below it', state, 111, 2);
      await gherkinStep('the indented Rule is NOT a child of the previous Rule', state, 112, 3);
      await afterScenario(state);
    });

    test('Scenario: Exploded tags make multiple tests (@tag @multiple_tags @1a)', async (context) => {
      let state = await initRuleScenario(context, 'Exploded tags make multiple tests', ['@tag', '@multiple_tags', '@1a']);
      await gherkinStep('an explodedTags config of [[ \'@1a\',\'@1b\' ], [ \'@2a\',\'@2b\' ]]', state, 116, 1, 1);
      await gherkinStep('this Scenario is run', state, 117, 2, 1);
      await gherkinStep('it should be split into 2 tests', state, 118, 3, 1);
      await afterScenario(state);
    });



    test('Scenario: Exploded tags make multiple tests (@tag @multiple_tags @1b)', async (context) => {
      let state = await initRuleScenario(context, 'Exploded tags make multiple tests', ['@tag', '@multiple_tags', '@1b']);
      await gherkinStep('an explodedTags config of [[ \'@1a\',\'@1b\' ], [ \'@2a\',\'@2b\' ]]', state, 116, 1, 2);
      await gherkinStep('this Scenario is run', state, 117, 2, 2);
      await gherkinStep('it should be split into 2 tests', state, 118, 3, 2);
      await afterScenario(state);
    });

    test('Scenario: More tags make more tests (@tag @multiple_tags @tag3 @1a @2a)', async (context) => {
      let state = await initRuleScenario(context, 'More tags make more tests', ['@tag', '@multiple_tags', '@tag3', '@1a', '@2a']);
      await gherkinStep('an explodedTags config of [[ \'@1a\',\'@1b\' ], [ \'@2a\',\'@2b\' ]]', state, 122, 1, 1);
      await gherkinStep('this Scenario is run', state, 123, 2, 1);
      await gherkinStep('it should be split into 4 tests', state, 124, 3, 1);
      await afterScenario(state);
    });



    test('Scenario: More tags make more tests (@tag @multiple_tags @tag3 @1a @2b)', async (context) => {
      let state = await initRuleScenario(context, 'More tags make more tests', ['@tag', '@multiple_tags', '@tag3', '@1a', '@2b']);
      await gherkinStep('an explodedTags config of [[ \'@1a\',\'@1b\' ], [ \'@2a\',\'@2b\' ]]', state, 122, 1, 2);
      await gherkinStep('this Scenario is run', state, 123, 2, 2);
      await gherkinStep('it should be split into 4 tests', state, 124, 3, 2);
      await afterScenario(state);
    });



    test('Scenario: More tags make more tests (@tag @multiple_tags @tag3 @1b @2a)', async (context) => {
      let state = await initRuleScenario(context, 'More tags make more tests', ['@tag', '@multiple_tags', '@tag3', '@1b', '@2a']);
      await gherkinStep('an explodedTags config of [[ \'@1a\',\'@1b\' ], [ \'@2a\',\'@2b\' ]]', state, 122, 1, 3);
      await gherkinStep('this Scenario is run', state, 123, 2, 3);
      await gherkinStep('it should be split into 4 tests', state, 124, 3, 3);
      await afterScenario(state);
    });



    test('Scenario: More tags make more tests (@tag @multiple_tags @tag3 @1b @2b)', async (context) => {
      let state = await initRuleScenario(context, 'More tags make more tests', ['@tag', '@multiple_tags', '@tag3', '@1b', '@2b']);
      await gherkinStep('an explodedTags config of [[ \'@1a\',\'@1b\' ], [ \'@2a\',\'@2b\' ]]', state, 122, 1, 4);
      await gherkinStep('this Scenario is run', state, 123, 2, 4);
      await gherkinStep('it should be split into 4 tests', state, 124, 3, 4);
      await afterScenario(state);
    });


  });

});
